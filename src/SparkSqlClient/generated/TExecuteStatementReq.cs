/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

namespace SparkSqlClient.generated
{
    internal partial class TExecuteStatementReq : TBase
    {
        private Dictionary<string, string> _confOverlay;
        private bool _runAsync;
        private long _queryTimeout;

        public TSessionHandle SessionHandle { get; set; }

        public string Statement { get; set; }

        public Dictionary<string, string> ConfOverlay
        {
            get
            {
                return _confOverlay;
            }
            set
            {
                __isset.confOverlay = true;
                this._confOverlay = value;
            }
        }

        public bool RunAsync
        {
            get
            {
                return _runAsync;
            }
            set
            {
                __isset.runAsync = true;
                this._runAsync = value;
            }
        }

        public long QueryTimeout
        {
            get
            {
                return _queryTimeout;
            }
            set
            {
                __isset.queryTimeout = true;
                this._queryTimeout = value;
            }
        }


        public Isset __isset;
        public struct Isset
        {
            public bool confOverlay;
            public bool runAsync;
            public bool queryTimeout;
        }

        public TExecuteStatementReq()
        {
            this._runAsync = false;
            this.__isset.runAsync = true;
            this._queryTimeout = 0;
            this.__isset.queryTimeout = true;
        }

        public TExecuteStatementReq(TSessionHandle sessionHandle, string statement) : this()
        {
            this.SessionHandle = sessionHandle;
            this.Statement = statement;
        }

        public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_sessionHandle = false;
                bool isset_statement = false;
                TField field;
                await iprot.ReadStructBeginAsync(cancellationToken);
                while (true)
                {
                    field = await iprot.ReadFieldBeginAsync(cancellationToken);
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }

                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                SessionHandle = new TSessionHandle();
                                await SessionHandle.ReadAsync(iprot, cancellationToken);
                                isset_sessionHandle = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                Statement = await iprot.ReadStringAsync(cancellationToken);
                                isset_statement = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.Map)
                            {
                                {
                                    TMap _map81 = await iprot.ReadMapBeginAsync(cancellationToken);
                                    ConfOverlay = new Dictionary<string, string>(_map81.Count);
                                    for(int _i82 = 0; _i82 < _map81.Count; ++_i82)
                                    {
                                        string _key83;
                                        string _val84;
                                        _key83 = await iprot.ReadStringAsync(cancellationToken);
                                        _val84 = await iprot.ReadStringAsync(cancellationToken);
                                        ConfOverlay[_key83] = _val84;
                                    }
                                    await iprot.ReadMapEndAsync(cancellationToken);
                                }
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.Bool)
                            {
                                RunAsync = await iprot.ReadBoolAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.I64)
                            {
                                QueryTimeout = await iprot.ReadI64Async(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        default: 
                            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            break;
                    }

                    await iprot.ReadFieldEndAsync(cancellationToken);
                }

                await iprot.ReadStructEndAsync(cancellationToken);
                if (!isset_sessionHandle)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
                if (!isset_statement)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                var struc = new TStruct("TExecuteStatementReq");
                await oprot.WriteStructBeginAsync(struc, cancellationToken);
                var field = new TField();
                field.Name = "sessionHandle";
                field.Type = TType.Struct;
                field.ID = 1;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await SessionHandle.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
                field.Name = "statement";
                field.Type = TType.String;
                field.ID = 2;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await oprot.WriteStringAsync(Statement, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
                if (ConfOverlay != null && __isset.confOverlay)
                {
                    field.Name = "confOverlay";
                    field.Type = TType.Map;
                    field.ID = 3;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    {
                        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ConfOverlay.Count), cancellationToken);
                        foreach (string _iter85 in ConfOverlay.Keys)
                        {
                            await oprot.WriteStringAsync(_iter85, cancellationToken);
                            await oprot.WriteStringAsync(ConfOverlay[_iter85], cancellationToken);
                        }
                        await oprot.WriteMapEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if (__isset.runAsync)
                {
                    field.Name = "runAsync";
                    field.Type = TType.Bool;
                    field.ID = 4;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBoolAsync(RunAsync, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if (__isset.queryTimeout)
                {
                    field.Name = "queryTimeout";
                    field.Type = TType.I64;
                    field.ID = 5;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI64Async(QueryTimeout, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                await oprot.WriteFieldStopAsync(cancellationToken);
                await oprot.WriteStructEndAsync(cancellationToken);
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override bool Equals(object that)
        {
            var other = that as TExecuteStatementReq;
            if (other == null) return false;
            if (ReferenceEquals(this, other)) return true;
            return System.Object.Equals(SessionHandle, other.SessionHandle)
                   && System.Object.Equals(Statement, other.Statement)
                   && ((__isset.confOverlay == other.__isset.confOverlay) && ((!__isset.confOverlay) || (TCollections.Equals(ConfOverlay, other.ConfOverlay))))
                   && ((__isset.runAsync == other.__isset.runAsync) && ((!__isset.runAsync) || (System.Object.Equals(RunAsync, other.RunAsync))))
                   && ((__isset.queryTimeout == other.__isset.queryTimeout) && ((!__isset.queryTimeout) || (System.Object.Equals(QueryTimeout, other.QueryTimeout))));
        }

        public override int GetHashCode() {
            int hashcode = 157;
            unchecked {
                hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
                hashcode = (hashcode * 397) + Statement.GetHashCode();
                if(__isset.confOverlay)
                    hashcode = (hashcode * 397) + TCollections.GetHashCode(ConfOverlay);
                if(__isset.runAsync)
                    hashcode = (hashcode * 397) + RunAsync.GetHashCode();
                if(__isset.queryTimeout)
                    hashcode = (hashcode * 397) + QueryTimeout.GetHashCode();
            }
            return hashcode;
        }

        public override string ToString()
        {
            var sb = new StringBuilder("TExecuteStatementReq(");
            sb.Append(", SessionHandle: ");
            sb.Append(SessionHandle== null ? "<null>" : SessionHandle.ToString());
            sb.Append(", Statement: ");
            sb.Append(Statement);
            if (ConfOverlay != null && __isset.confOverlay)
            {
                sb.Append(", ConfOverlay: ");
                sb.Append(ConfOverlay);
            }
            if (__isset.runAsync)
            {
                sb.Append(", RunAsync: ");
                sb.Append(RunAsync);
            }
            if (__isset.queryTimeout)
            {
                sb.Append(", QueryTimeout: ");
                sb.Append(QueryTimeout);
            }
            sb.Append(")");
            return sb.ToString();
        }
    }
}

