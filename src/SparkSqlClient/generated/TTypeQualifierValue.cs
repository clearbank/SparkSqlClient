/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

namespace SparkSqlClient.generated
{
    internal partial class TTypeQualifierValue : TBase
    {
        private int _i32Value;
        private string _stringValue;

        public int I32Value
        {
            get
            {
                return _i32Value;
            }
            set
            {
                __isset.i32Value = true;
                this._i32Value = value;
            }
        }

        public string StringValue
        {
            get
            {
                return _stringValue;
            }
            set
            {
                __isset.stringValue = true;
                this._stringValue = value;
            }
        }


        public Isset __isset;
        public struct Isset
        {
            public bool i32Value;
            public bool stringValue;
        }

        public TTypeQualifierValue()
        {
        }

        public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                await iprot.ReadStructBeginAsync(cancellationToken);
                while (true)
                {
                    field = await iprot.ReadFieldBeginAsync(cancellationToken);
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }

                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I32)
                            {
                                I32Value = await iprot.ReadI32Async(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                StringValue = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        default: 
                            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            break;
                    }

                    await iprot.ReadFieldEndAsync(cancellationToken);
                }

                await iprot.ReadStructEndAsync(cancellationToken);
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                var struc = new TStruct("TTypeQualifierValue");
                await oprot.WriteStructBeginAsync(struc, cancellationToken);
                var field = new TField();
                if (__isset.i32Value)
                {
                    field.Name = "i32Value";
                    field.Type = TType.I32;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI32Async(I32Value, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if (StringValue != null && __isset.stringValue)
                {
                    field.Name = "stringValue";
                    field.Type = TType.String;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(StringValue, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                await oprot.WriteFieldStopAsync(cancellationToken);
                await oprot.WriteStructEndAsync(cancellationToken);
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override bool Equals(object that)
        {
            var other = that as TTypeQualifierValue;
            if (other == null) return false;
            if (ReferenceEquals(this, other)) return true;
            return ((__isset.i32Value == other.__isset.i32Value) && ((!__isset.i32Value) || (System.Object.Equals(I32Value, other.I32Value))))
                   && ((__isset.stringValue == other.__isset.stringValue) && ((!__isset.stringValue) || (System.Object.Equals(StringValue, other.StringValue))));
        }

        public override int GetHashCode() {
            int hashcode = 157;
            unchecked {
                if(__isset.i32Value)
                    hashcode = (hashcode * 397) + I32Value.GetHashCode();
                if(__isset.stringValue)
                    hashcode = (hashcode * 397) + StringValue.GetHashCode();
            }
            return hashcode;
        }

        public override string ToString()
        {
            var sb = new StringBuilder("TTypeQualifierValue(");
            bool __first = true;
            if (__isset.i32Value)
            {
                if(!__first) { sb.Append(", "); }
                __first = false;
                sb.Append("I32Value: ");
                sb.Append(I32Value);
            }
            if (StringValue != null && __isset.stringValue)
            {
                if(!__first) { sb.Append(", "); }
                __first = false;
                sb.Append("StringValue: ");
                sb.Append(StringValue);
            }
            sb.Append(")");
            return sb.ToString();
        }
    }
}

