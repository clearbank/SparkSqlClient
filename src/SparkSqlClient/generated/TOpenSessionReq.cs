/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

namespace SparkSqlClient.generated
{
    internal partial class TOpenSessionReq : TBase
    {
        private string _username;
        private string _password;
        private Dictionary<string, string> _configuration;

        /// <summary>
        /// 
        /// <seealso cref="TProtocolVersion"/>
        /// </summary>
        public TProtocolVersion Client_protocol { get; set; }

        public string Username
        {
            get
            {
                return _username;
            }
            set
            {
                __isset.username = true;
                this._username = value;
            }
        }

        public string Password
        {
            get
            {
                return _password;
            }
            set
            {
                __isset.password = true;
                this._password = value;
            }
        }

        public Dictionary<string, string> Configuration
        {
            get
            {
                return _configuration;
            }
            set
            {
                __isset.configuration = true;
                this._configuration = value;
            }
        }


        public Isset __isset;
        public struct Isset
        {
            public bool username;
            public bool password;
            public bool configuration;
        }

        public TOpenSessionReq()
        {
            this.Client_protocol = TProtocolVersion.HIVE_CLI_SERVICE_PROTOCOL_V10;
        }

        public TOpenSessionReq(TProtocolVersion client_protocol) : this()
        {
            this.Client_protocol = client_protocol;
        }

        public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_client_protocol = false;
                TField field;
                await iprot.ReadStructBeginAsync(cancellationToken);
                while (true)
                {
                    field = await iprot.ReadFieldBeginAsync(cancellationToken);
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }

                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I32)
                            {
                                Client_protocol = (TProtocolVersion)await iprot.ReadI32Async(cancellationToken);
                                isset_client_protocol = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                Username = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                Password = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.Map)
                            {
                                {
                                    TMap _map71 = await iprot.ReadMapBeginAsync(cancellationToken);
                                    Configuration = new Dictionary<string, string>(_map71.Count);
                                    for(int _i72 = 0; _i72 < _map71.Count; ++_i72)
                                    {
                                        string _key73;
                                        string _val74;
                                        _key73 = await iprot.ReadStringAsync(cancellationToken);
                                        _val74 = await iprot.ReadStringAsync(cancellationToken);
                                        Configuration[_key73] = _val74;
                                    }
                                    await iprot.ReadMapEndAsync(cancellationToken);
                                }
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        default: 
                            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            break;
                    }

                    await iprot.ReadFieldEndAsync(cancellationToken);
                }

                await iprot.ReadStructEndAsync(cancellationToken);
                if (!isset_client_protocol)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                var struc = new TStruct("TOpenSessionReq");
                await oprot.WriteStructBeginAsync(struc, cancellationToken);
                var field = new TField();
                field.Name = "client_protocol";
                field.Type = TType.I32;
                field.ID = 1;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await oprot.WriteI32Async((int)Client_protocol, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
                if (Username != null && __isset.username)
                {
                    field.Name = "username";
                    field.Type = TType.String;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(Username, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if (Password != null && __isset.password)
                {
                    field.Name = "password";
                    field.Type = TType.String;
                    field.ID = 3;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(Password, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if (Configuration != null && __isset.configuration)
                {
                    field.Name = "configuration";
                    field.Type = TType.Map;
                    field.ID = 4;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    {
                        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Configuration.Count), cancellationToken);
                        foreach (string _iter75 in Configuration.Keys)
                        {
                            await oprot.WriteStringAsync(_iter75, cancellationToken);
                            await oprot.WriteStringAsync(Configuration[_iter75], cancellationToken);
                        }
                        await oprot.WriteMapEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                await oprot.WriteFieldStopAsync(cancellationToken);
                await oprot.WriteStructEndAsync(cancellationToken);
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override bool Equals(object that)
        {
            var other = that as TOpenSessionReq;
            if (other == null) return false;
            if (ReferenceEquals(this, other)) return true;
            return System.Object.Equals(Client_protocol, other.Client_protocol)
                   && ((__isset.username == other.__isset.username) && ((!__isset.username) || (System.Object.Equals(Username, other.Username))))
                   && ((__isset.password == other.__isset.password) && ((!__isset.password) || (System.Object.Equals(Password, other.Password))))
                   && ((__isset.configuration == other.__isset.configuration) && ((!__isset.configuration) || (TCollections.Equals(Configuration, other.Configuration))));
        }

        public override int GetHashCode() {
            int hashcode = 157;
            unchecked {
                hashcode = (hashcode * 397) + Client_protocol.GetHashCode();
                if(__isset.username)
                    hashcode = (hashcode * 397) + Username.GetHashCode();
                if(__isset.password)
                    hashcode = (hashcode * 397) + Password.GetHashCode();
                if(__isset.configuration)
                    hashcode = (hashcode * 397) + TCollections.GetHashCode(Configuration);
            }
            return hashcode;
        }

        public override string ToString()
        {
            var sb = new StringBuilder("TOpenSessionReq(");
            sb.Append(", Client_protocol: ");
            sb.Append(Client_protocol);
            if (Username != null && __isset.username)
            {
                sb.Append(", Username: ");
                sb.Append(Username);
            }
            if (Password != null && __isset.password)
            {
                sb.Append(", Password: ");
                sb.Append(Password);
            }
            if (Configuration != null && __isset.configuration)
            {
                sb.Append(", Configuration: ");
                sb.Append(Configuration);
            }
            sb.Append(")");
            return sb.ToString();
        }
    }
}

