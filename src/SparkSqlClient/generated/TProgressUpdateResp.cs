/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

namespace SparkSqlClient.generated
{
    internal partial class TProgressUpdateResp : TBase
    {

        public List<string> HeaderNames { get; set; }

        public List<List<string>> Rows { get; set; }

        public double ProgressedPercentage { get; set; }

        /// <summary>
        /// 
        /// <seealso cref="TJobExecutionStatus"/>
        /// </summary>
        public TJobExecutionStatus Status { get; set; }

        public string FooterSummary { get; set; }

        public long StartTime { get; set; }

        public TProgressUpdateResp()
        {
        }

        public TProgressUpdateResp(List<string> headerNames, List<List<string>> rows, double progressedPercentage, TJobExecutionStatus status, string footerSummary, long startTime) : this()
        {
            this.HeaderNames = headerNames;
            this.Rows = rows;
            this.ProgressedPercentage = progressedPercentage;
            this.Status = status;
            this.FooterSummary = footerSummary;
            this.StartTime = startTime;
        }

        public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_headerNames = false;
                bool isset_rows = false;
                bool isset_progressedPercentage = false;
                bool isset_status = false;
                bool isset_footerSummary = false;
                bool isset_startTime = false;
                TField field;
                await iprot.ReadStructBeginAsync(cancellationToken);
                while (true)
                {
                    field = await iprot.ReadFieldBeginAsync(cancellationToken);
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }

                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.List)
                            {
                                {
                                    TList _list90 = await iprot.ReadListBeginAsync(cancellationToken);
                                    HeaderNames = new List<string>(_list90.Count);
                                    for(int _i91 = 0; _i91 < _list90.Count; ++_i91)
                                    {
                                        string _elem92;
                                        _elem92 = await iprot.ReadStringAsync(cancellationToken);
                                        HeaderNames.Add(_elem92);
                                    }
                                    await iprot.ReadListEndAsync(cancellationToken);
                                }
                                isset_headerNames = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    TList _list93 = await iprot.ReadListBeginAsync(cancellationToken);
                                    Rows = new List<List<string>>(_list93.Count);
                                    for(int _i94 = 0; _i94 < _list93.Count; ++_i94)
                                    {
                                        List<string> _elem95;
                                        {
                                            TList _list96 = await iprot.ReadListBeginAsync(cancellationToken);
                                            _elem95 = new List<string>(_list96.Count);
                                            for(int _i97 = 0; _i97 < _list96.Count; ++_i97)
                                            {
                                                string _elem98;
                                                _elem98 = await iprot.ReadStringAsync(cancellationToken);
                                                _elem95.Add(_elem98);
                                            }
                                            await iprot.ReadListEndAsync(cancellationToken);
                                        }
                                        Rows.Add(_elem95);
                                    }
                                    await iprot.ReadListEndAsync(cancellationToken);
                                }
                                isset_rows = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.Double)
                            {
                                ProgressedPercentage = await iprot.ReadDoubleAsync(cancellationToken);
                                isset_progressedPercentage = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I32)
                            {
                                Status = (TJobExecutionStatus)await iprot.ReadI32Async(cancellationToken);
                                isset_status = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.String)
                            {
                                FooterSummary = await iprot.ReadStringAsync(cancellationToken);
                                isset_footerSummary = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 6:
                            if (field.Type == TType.I64)
                            {
                                StartTime = await iprot.ReadI64Async(cancellationToken);
                                isset_startTime = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        default: 
                            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            break;
                    }

                    await iprot.ReadFieldEndAsync(cancellationToken);
                }

                await iprot.ReadStructEndAsync(cancellationToken);
                if (!isset_headerNames)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
                if (!isset_rows)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
                if (!isset_progressedPercentage)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
                if (!isset_status)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
                if (!isset_footerSummary)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
                if (!isset_startTime)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                var struc = new TStruct("TProgressUpdateResp");
                await oprot.WriteStructBeginAsync(struc, cancellationToken);
                var field = new TField();
                field.Name = "headerNames";
                field.Type = TType.List;
                field.ID = 1;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                {
                    await oprot.WriteListBeginAsync(new TList(TType.String, HeaderNames.Count), cancellationToken);
                    foreach (string _iter99 in HeaderNames)
                    {
                        await oprot.WriteStringAsync(_iter99, cancellationToken);
                    }
                    await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
                field.Name = "rows";
                field.Type = TType.List;
                field.ID = 2;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                {
                    await oprot.WriteListBeginAsync(new TList(TType.List, Rows.Count), cancellationToken);
                    foreach (List<string> _iter100 in Rows)
                    {
                        {
                            await oprot.WriteListBeginAsync(new TList(TType.String, _iter100.Count), cancellationToken);
                            foreach (string _iter101 in _iter100)
                            {
                                await oprot.WriteStringAsync(_iter101, cancellationToken);
                            }
                            await oprot.WriteListEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
                field.Name = "progressedPercentage";
                field.Type = TType.Double;
                field.ID = 3;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await oprot.WriteDoubleAsync(ProgressedPercentage, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
                field.Name = "status";
                field.Type = TType.I32;
                field.ID = 4;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await oprot.WriteI32Async((int)Status, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
                field.Name = "footerSummary";
                field.Type = TType.String;
                field.ID = 5;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await oprot.WriteStringAsync(FooterSummary, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
                field.Name = "startTime";
                field.Type = TType.I64;
                field.ID = 6;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await oprot.WriteI64Async(StartTime, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
                await oprot.WriteFieldStopAsync(cancellationToken);
                await oprot.WriteStructEndAsync(cancellationToken);
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override bool Equals(object that)
        {
            var other = that as TProgressUpdateResp;
            if (other == null) return false;
            if (ReferenceEquals(this, other)) return true;
            return TCollections.Equals(HeaderNames, other.HeaderNames)
                   && TCollections.Equals(Rows, other.Rows)
                   && System.Object.Equals(ProgressedPercentage, other.ProgressedPercentage)
                   && System.Object.Equals(Status, other.Status)
                   && System.Object.Equals(FooterSummary, other.FooterSummary)
                   && System.Object.Equals(StartTime, other.StartTime);
        }

        public override int GetHashCode() {
            int hashcode = 157;
            unchecked {
                hashcode = (hashcode * 397) + TCollections.GetHashCode(HeaderNames);
                hashcode = (hashcode * 397) + TCollections.GetHashCode(Rows);
                hashcode = (hashcode * 397) + ProgressedPercentage.GetHashCode();
                hashcode = (hashcode * 397) + Status.GetHashCode();
                hashcode = (hashcode * 397) + FooterSummary.GetHashCode();
                hashcode = (hashcode * 397) + StartTime.GetHashCode();
            }
            return hashcode;
        }

        public override string ToString()
        {
            var sb = new StringBuilder("TProgressUpdateResp(");
            sb.Append(", HeaderNames: ");
            sb.Append(HeaderNames);
            sb.Append(", Rows: ");
            sb.Append(Rows);
            sb.Append(", ProgressedPercentage: ");
            sb.Append(ProgressedPercentage);
            sb.Append(", Status: ");
            sb.Append(Status);
            sb.Append(", FooterSummary: ");
            sb.Append(FooterSummary);
            sb.Append(", StartTime: ");
            sb.Append(StartTime);
            sb.Append(")");
            return sb.ToString();
        }
    }
}

