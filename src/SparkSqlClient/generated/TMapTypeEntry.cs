/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

namespace SparkSqlClient.generated
{
    internal partial class TMapTypeEntry : TBase
    {

        public int KeyTypePtr { get; set; }

        public int ValueTypePtr { get; set; }

        public TMapTypeEntry()
        {
        }

        public TMapTypeEntry(int keyTypePtr, int valueTypePtr) : this()
        {
            this.KeyTypePtr = keyTypePtr;
            this.ValueTypePtr = valueTypePtr;
        }

        public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_keyTypePtr = false;
                bool isset_valueTypePtr = false;
                TField field;
                await iprot.ReadStructBeginAsync(cancellationToken);
                while (true)
                {
                    field = await iprot.ReadFieldBeginAsync(cancellationToken);
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }

                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I32)
                            {
                                KeyTypePtr = await iprot.ReadI32Async(cancellationToken);
                                isset_keyTypePtr = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.I32)
                            {
                                ValueTypePtr = await iprot.ReadI32Async(cancellationToken);
                                isset_valueTypePtr = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        default: 
                            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            break;
                    }

                    await iprot.ReadFieldEndAsync(cancellationToken);
                }

                await iprot.ReadStructEndAsync(cancellationToken);
                if (!isset_keyTypePtr)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
                if (!isset_valueTypePtr)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                var struc = new TStruct("TMapTypeEntry");
                await oprot.WriteStructBeginAsync(struc, cancellationToken);
                var field = new TField();
                field.Name = "keyTypePtr";
                field.Type = TType.I32;
                field.ID = 1;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await oprot.WriteI32Async(KeyTypePtr, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
                field.Name = "valueTypePtr";
                field.Type = TType.I32;
                field.ID = 2;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await oprot.WriteI32Async(ValueTypePtr, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
                await oprot.WriteFieldStopAsync(cancellationToken);
                await oprot.WriteStructEndAsync(cancellationToken);
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override bool Equals(object that)
        {
            var other = that as TMapTypeEntry;
            if (other == null) return false;
            if (ReferenceEquals(this, other)) return true;
            return System.Object.Equals(KeyTypePtr, other.KeyTypePtr)
                   && System.Object.Equals(ValueTypePtr, other.ValueTypePtr);
        }

        public override int GetHashCode() {
            int hashcode = 157;
            unchecked {
                hashcode = (hashcode * 397) + KeyTypePtr.GetHashCode();
                hashcode = (hashcode * 397) + ValueTypePtr.GetHashCode();
            }
            return hashcode;
        }

        public override string ToString()
        {
            var sb = new StringBuilder("TMapTypeEntry(");
            sb.Append(", KeyTypePtr: ");
            sb.Append(KeyTypePtr);
            sb.Append(", ValueTypePtr: ");
            sb.Append(ValueTypePtr);
            sb.Append(")");
            return sb.ToString();
        }
    }
}

