/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

namespace SparkSqlClient.generated
{
    internal partial class TFetchResultsResp : TBase
    {
        private bool _hasMoreRows;
        private TRowSet _results;

        public TStatus Status { get; set; }

        public bool HasMoreRows
        {
            get
            {
                return _hasMoreRows;
            }
            set
            {
                __isset.hasMoreRows = true;
                this._hasMoreRows = value;
            }
        }

        public TRowSet Results
        {
            get
            {
                return _results;
            }
            set
            {
                __isset.results = true;
                this._results = value;
            }
        }


        public Isset __isset;
        public struct Isset
        {
            public bool hasMoreRows;
            public bool results;
        }

        public TFetchResultsResp()
        {
        }

        public TFetchResultsResp(TStatus status) : this()
        {
            this.Status = status;
        }

        public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_status = false;
                TField field;
                await iprot.ReadStructBeginAsync(cancellationToken);
                while (true)
                {
                    field = await iprot.ReadFieldBeginAsync(cancellationToken);
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }

                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.Struct)
                            {
                                Status = new TStatus();
                                await Status.ReadAsync(iprot, cancellationToken);
                                isset_status = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.Bool)
                            {
                                HasMoreRows = await iprot.ReadBoolAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.Struct)
                            {
                                Results = new TRowSet();
                                await Results.ReadAsync(iprot, cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        default: 
                            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            break;
                    }

                    await iprot.ReadFieldEndAsync(cancellationToken);
                }

                await iprot.ReadStructEndAsync(cancellationToken);
                if (!isset_status)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                var struc = new TStruct("TFetchResultsResp");
                await oprot.WriteStructBeginAsync(struc, cancellationToken);
                var field = new TField();
                field.Name = "status";
                field.Type = TType.Struct;
                field.ID = 1;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                await Status.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
                if (__isset.hasMoreRows)
                {
                    field.Name = "hasMoreRows";
                    field.Type = TType.Bool;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBoolAsync(HasMoreRows, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if (Results != null && __isset.results)
                {
                    field.Name = "results";
                    field.Type = TType.Struct;
                    field.ID = 3;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await Results.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                await oprot.WriteFieldStopAsync(cancellationToken);
                await oprot.WriteStructEndAsync(cancellationToken);
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override bool Equals(object that)
        {
            var other = that as TFetchResultsResp;
            if (other == null) return false;
            if (ReferenceEquals(this, other)) return true;
            return System.Object.Equals(Status, other.Status)
                   && ((__isset.hasMoreRows == other.__isset.hasMoreRows) && ((!__isset.hasMoreRows) || (System.Object.Equals(HasMoreRows, other.HasMoreRows))))
                   && ((__isset.results == other.__isset.results) && ((!__isset.results) || (System.Object.Equals(Results, other.Results))));
        }

        public override int GetHashCode() {
            int hashcode = 157;
            unchecked {
                hashcode = (hashcode * 397) + Status.GetHashCode();
                if(__isset.hasMoreRows)
                    hashcode = (hashcode * 397) + HasMoreRows.GetHashCode();
                if(__isset.results)
                    hashcode = (hashcode * 397) + Results.GetHashCode();
            }
            return hashcode;
        }

        public override string ToString()
        {
            var sb = new StringBuilder("TFetchResultsResp(");
            sb.Append(", Status: ");
            sb.Append(Status== null ? "<null>" : Status.ToString());
            if (__isset.hasMoreRows)
            {
                sb.Append(", HasMoreRows: ");
                sb.Append(HasMoreRows);
            }
            if (Results != null && __isset.results)
            {
                sb.Append(", Results: ");
                sb.Append(Results== null ? "<null>" : Results.ToString());
            }
            sb.Append(")");
            return sb.ToString();
        }
    }
}

